/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectofinal.Administrador;

import com.mycompany.proyectofinal.Bienvenida;
import com.mycompany.proyectofinal.Curso;
import com.mycompany.proyectofinal.ProyectoFinal;
import com.mycompany.proyectofinal.Usuario;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

public class CargasMasivas extends javax.swing.JFrame {

    private Usuario usuario;
    private int idProfesor = 0;
    private int idAlumno = 0;

    public CargasMasivas(Usuario usuario) {
        initComponents();
        this.usuario = usuario;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnCargarCsv = new javax.swing.JButton();
        btnGuardarCsV = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnCargarJSON = new javax.swing.JButton();
        btnGuardarJson = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Creaci√≥n o Carga de Archivos: ");

        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Archivos CSV: ");

        btnCargarCsv.setText("Cargar");
        btnCargarCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarCsvActionPerformed(evt);
            }
        });

        btnGuardarCsV.setText("Guardar");
        btnGuardarCsV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCsVActionPerformed(evt);
            }
        });

        jLabel3.setText("Archivos XML");

        jButton2.setText("Cargar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Guardar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Archivos JSON: ");

        btnCargarJSON.setText("Cargar");
        btnCargarJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarJSONActionPerformed(evt);
            }
        });

        btnGuardarJson.setText("Guardar");
        btnGuardarJson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarJsonActionPerformed(evt);
            }
        });

        jLabel5.setText("Archivos .progra1 ");

        jButton4.setText("Cargar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnCargarCsv)
                                        .addComponent(jButton2)
                                        .addComponent(btnCargarJSON))
                                    .addGap(23, 23, 23)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnGuardarJson)
                                        .addComponent(jButton3)
                                        .addComponent(btnGuardarCsV)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargarCsv)
                    .addComponent(btnGuardarCsV))
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargarJSON)
                    .addComponent(btnGuardarJson))
                .addGap(26, 26, 26)
                .addComponent(jLabel5)
                .addGap(26, 26, 26)
                .addComponent(jButton4)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Bienvenida bienvenida = new Bienvenida(usuario);
        bienvenida.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnGuardarCsVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCsVActionPerformed
        generarCSVProfesores(ProyectoFinal.listaUsuario);
    }//GEN-LAST:event_btnGuardarCsVActionPerformed

    private void btnCargarCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarCsvActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                cargarProfesoresDesdeCSV(file);
                JOptionPane.showMessageDialog(this, "Profesores cargados exitosamente desde el archivo CSV.");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al cargar el archivo CSV: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnCargarCsvActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos XML", "xml");

        fileChooser.setFileFilter(filtro);

        int seleccion = fileChooser.showSaveDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            escribirXML(archivo);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos XML", "xml");
        fileChooser.setFileFilter(filter);

        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            cargarAlumnosDesdeXML(archivo);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnGuardarJsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarJsonActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar archivo JSON de cursos");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos JSON", "json"));

        int seleccion = fileChooser.showSaveDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            if (!archivo.getAbsolutePath().endsWith(".json")) {
                archivo = new File(archivo + ".json");
            }
            guardarCursosEnJSON(archivo);
        }

    }//GEN-LAST:event_btnGuardarJsonActionPerformed

    private void btnCargarJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarJSONActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                String jsonString = leerArchivo(selectedFile);
                parsearCursos(jsonString);
                JOptionPane.showMessageDialog(this, "Cursos cargados con √©xito");
            } catch (IOException | ParseException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al cargar el archivo");
            }
        }

    }//GEN-LAST:event_btnCargarJSONActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        File archivoAsignaciones = seleccionarArchivo();
        if (archivoAsignaciones != null) {
            Map<Integer, List<String>> asignaciones = cargarAsignaciones(archivoAsignaciones);

            for (Map.Entry<Integer, List<String>> entry : asignaciones.entrySet()) {
                Integer numeroCurso = entry.getKey();
                List<String> carnetsEstudiantes = entry.getValue();

                Curso curso = buscarCursoPorNumero(numeroCurso);
                if (curso != null) {
                    asignarEstudiantesACurso(curso, carnetsEstudiantes);
                } else {
                    System.out.println("Curso no encontrado para el n√∫mero: " + numeroCurso);
                }
            }

            JOptionPane.showMessageDialog(this, "Asignaciones de cursos realizadas correctamente");
        } else {
            JOptionPane.showMessageDialog(this, "No se seleccion√≥ ning√∫n archivo");
        }

    }//GEN-LAST:event_jButton4ActionPerformed

//************************************************************************************//    
//**********************************Generacion de Archivos CSV************************//
//************************************************************************************//
    public static void generarCSVProfesores(List<Usuario> usuarios) {
        List<Usuario> profesores = new ArrayList<>();
        for (Usuario usuario : usuarios) {
            if ("Profesor".equals(usuario.getRolUsuario())) {
                profesores.add(usuario);
            }
        }

        generarCSV(profesores, "profesores.csv");
    }

    private static void generarCSV(List<Usuario> usuarios, String nombreArchivo) {
        String csvFile = nombreArchivo;
        try (FileWriter writer = new FileWriter(csvFile)) {

            for (Usuario usuario : usuarios) {
                writer.append(usuario.getUsuarioLogin())
                        .append(",")
                        .append(usuario.getNombreUsuario())
                        .append(",")
                        .append(usuario.getApellidoUsuario())
                        .append(",")
                        .append(usuario.getPasswordUsuario())
                        .append("\n");
            }
            writer.flush();
            System.out.println("Archivo CSV generado correctamente: " + nombreArchivo);
        } catch (IOException e) {
            System.err.println("Error al escribir el archivo CSV: " + e.getMessage());
        }
    }

    //************************************************************************************//    
//**********************************Carga de Archivos CSV******************************//
//************************************************************************************//
    private void cargarProfesoresDesdeCSV(File file) throws IOException {
        BufferedReader br = null;
        String line = "";
        String csvSplitBy = ",";

        try {
            br = new BufferedReader(new FileReader(file));
            while ((line = br.readLine()) != null) {
                String[] datosProfesor = line.split(csvSplitBy);
                Usuario profesor = new Usuario(
                        idProfesor++,
                        datosProfesor[0],
                        datosProfesor[1],
                        datosProfesor[2],
                        datosProfesor[3],
                        "Profesor",
                        0
                );
                ProyectoFinal.listaUsuario.add(profesor);
            }
        } finally {
            if (br != null) {
                br.close();
            }
        }
    }

    //******************************************************************************************//    
    //**********************************Generacion de Archivos XML******************************//
//******************************************************************************************//
    private void escribirXML(File archivo) {
        FileWriter fichero = null;
        PrintWriter pw = null;

        try {
            fichero = new FileWriter(archivo);
            pw = new PrintWriter(fichero);

            pw.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            pw.println("<alumnos>");

            for (Usuario alumno : ProyectoFinal.listaUsuario) {
                if (alumno.getRolUsuario().equals("Alumno")) {
                    pw.println("<alumno>");
                    pw.println("<carne>" + alumno.getUsuarioLogin() + "</carne>");
                    pw.println("<nombre>" + alumno.getNombreUsuario() + "</nombre>");
                    pw.println("<apellido>" + alumno.getApellidoUsuario() + "</apellido>");
                    pw.println("<password>" + alumno.getPasswordUsuario() + "</password>");
                    pw.println("</alumno>");
                }
            }

            pw.println("</alumnos>");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (fichero != null) {
                    fichero.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    //******************************************************************************************//    
    //**********************************Carga de Archivos XML******************************//
//******************************************************************************************//
    private void cargarAlumnosDesdeXML(File archivo) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(archivo);
            NodeList nodeList = doc.getElementsByTagName("alumno");
            for (int i = 0; i < nodeList.getLength(); i++) {
                Element element = (Element) nodeList.item(i);
                String carne = element.getElementsByTagName("carne").item(0).getTextContent();
                String nombre = element.getElementsByTagName("nombre").item(0).getTextContent();
                String apellido = element.getElementsByTagName("apellido").item(0).getTextContent();
                String password = element.getElementsByTagName("password").item(0).getTextContent();
                Usuario alumno = new Usuario(idAlumno++, carne, nombre, apellido, password, "Alumno", 0);
                ProyectoFinal.listaUsuario.add(alumno);
            }

            JOptionPane.showMessageDialog(this, "Alumnos cargados exitosamente desde el archivo XML.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar los alumnos desde el archivo XML: " + e.getMessage());
        }
    }

    //************************************************************************************//    
//**********************************Generacion de Archivos JSON************************//
//************************************************************************************//
    private void guardarCursosEnJSON(File archivo) {
        try {
            JSONArray jsonArray = new JSONArray();
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

            for (Curso curso : ProyectoFinal.listaCurso) {
                JSONObject jsonObject = new JSONObject();
                jsonObject.put("id", curso.getIdCurso());
                jsonObject.put("nombre", curso.getNombreCurso());
                jsonObject.put("seccion", curso.getSeccionCurso());
                jsonObject.put("fecha_inicio", dateFormat.format(curso.getFechaInicio()));
                jsonObject.put("fecha_fin", dateFormat.format(curso.getFechaFin()));
                jsonObject.put("hora_inicio", curso.getHoraInicio());
                jsonObject.put("hora_fin", curso.getHoraFin());
                jsonObject.put("profesor", curso.getUsuarioAsignado().getUsuarioLogin());

                // A√±adir las notas de los alumnos
                JSONArray notasArray = new JSONArray();
                for (Map.Entry<Usuario, Integer> entry : curso.getNotasAlumnos().entrySet()) {
                    JSONObject notaObject = new JSONObject();
                    notaObject.put("alumno", entry.getKey().getUsuarioLogin());
                    notaObject.put("nota", entry.getValue());
                    notasArray.add(notaObject);
                }
                jsonObject.put("notas", notasArray);

                jsonArray.add(jsonObject);
            }

            try (FileWriter fileWriter = new FileWriter(archivo)) {
                fileWriter.write(jsonArray.toJSONString());
                fileWriter.flush();
                JOptionPane.showMessageDialog(this, "Cursos guardados exitosamente en el archivo JSON.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar los cursos en el archivo JSON: " + e.getMessage());
        }
    }

    //************************************************************************************//    
//**********************************Carga de Archivos JSON************************//
//************************************************************************************//
    private String leerArchivo(File archivo) throws IOException {
        StringBuilder jsonStringBuilder = new StringBuilder();
        try (FileReader reader = new FileReader(archivo)) {
            int i;
            while ((i = reader.read()) != -1) {
                jsonStringBuilder.append((char) i);
            }
        }
        return jsonStringBuilder.toString();
    }

    private void parsearCursos(String jsonString) throws ParseException, org.json.simple.parser.ParseException {
        JSONParser parser = new JSONParser();
        JSONArray jsonArray = (JSONArray) parser.parse(jsonString);
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        try {
            for (int j = 0; j < jsonArray.size(); j++) {
                JSONObject cursoJson = (JSONObject) jsonArray.get(j);
                String nombre = (String) cursoJson.get("nombre");
                String seccion = (String) cursoJson.get("seccion");
                Date fechaInicio = dateFormat.parse((String) cursoJson.get("fecha_inicio"));
                Date fechaFin = dateFormat.parse((String) cursoJson.get("fecha_fin"));
                String horaInicio = (String) cursoJson.get("hora_inicio");
                String horaFin = (String) cursoJson.get("hora_fin");
                String profesor = (String) cursoJson.get("profesor");
                long idLong = (Long) cursoJson.get("id");
                int id = (int) idLong;

                Usuario profesorUsuario = getUsuarioByName(profesor);
                Curso curso = new Curso(id, nombre, seccion, fechaInicio, fechaFin, horaInicio, horaFin, profesorUsuario, 0);

                JSONArray notasArray = (JSONArray) cursoJson.get("notas");
                for (int k = 0; k < notasArray.size(); k++) {
                    JSONObject notaJson = (JSONObject) notasArray.get(k);
                    String alumno = (String) notaJson.get("alumno");
                    Integer nota = (notaJson.get("nota") != null) ? ((Long) notaJson.get("nota")).intValue() : 0;
                    Usuario alumnoUsuario = getUsuarioByName(alumno);
                    curso.agregarAlumnos(alumnoUsuario);
                    curso.agregarNota(alumnoUsuario, nota);
                }

                ProyectoFinal.listaCurso.add(curso);
            }
        } catch (java.text.ParseException e) {
            System.out.println(e);
        }
    }

    private Usuario getUsuarioByName(String nombre) {
        for (Usuario usuario : ProyectoFinal.listaUsuario) {
            if (usuario.getUsuarioLogin().equalsIgnoreCase(nombre)) {
                return usuario;
            }
        }
        return null; // o crear un nuevo usuario si no existe
    }

    //************************************************************************************//    
//**********************************Generacion de Archivos .PROGRA1************************//
//************************************************************************************//
    private Map<Integer, List<String>> cargarAsignaciones(File archivo) {
        Map<Integer, List<String>> asignaciones = new HashMap<>();

        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split("#");
                if (partes.length == 2) {
                    int numeroCurso = Integer.parseInt(partes[0].trim());
                    String carnetEstudiante = partes[1].trim();

                    List<String> carnetsEstudiantes = asignaciones.getOrDefault(numeroCurso, new ArrayList<>());
                    carnetsEstudiantes.add(carnetEstudiante);
                    asignaciones.put(numeroCurso, carnetsEstudiantes);
                } else {
                    System.out.println("Formato incorrecto en la l√≠nea: " + linea);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return asignaciones;
    }

// M√©todo para asignar estudiantes a un curso
    private void asignarEstudiantesACurso(Curso curso, List<String> carnetsEstudiantes) {
        for (String carnetEstudiante : carnetsEstudiantes) {
            Usuario estudiante = buscarEstudiantePorCarnet(carnetEstudiante);
            if (estudiante != null) {
                // Verificar si el estudiante ya est√° presente en el curso
                if (!curso.getAlumnoAsignado().contains(estudiante)) {
                    curso.agregarAlumnos(estudiante);
                } else {
                    System.out.println("El estudiante " + estudiante.getUsuarioLogin() + " ya est√° asignado al curso.");
                }
            } else {
                System.out.println("Estudiante no encontrado para el carn√©: " + carnetEstudiante);
            }
        }
    }

// M√©todo para buscar un estudiante por su carn√©
    private Usuario buscarEstudiantePorCarnet(String carnetEstudiante) {
        for (Usuario estudiante : ProyectoFinal.listaUsuario) {
            if (estudiante.getUsuarioLogin().equals(carnetEstudiante)) {
                return estudiante;
            }
        }
        return null;
    }

// M√©todo para buscar un curso por su n√∫mero
    private Curso buscarCursoPorNumero(Integer numeroCurso) {
        for (Curso curso : ProyectoFinal.listaCurso) {
            if (curso.getIdCurso().equals(numeroCurso)) {
                return curso;
            }
        }
        return null;
    }

// M√©todo para seleccionar el archivo .progra1
    private File seleccionarArchivo() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarCsv;
    private javax.swing.JButton btnCargarJSON;
    private javax.swing.JButton btnGuardarCsV;
    private javax.swing.JButton btnGuardarJson;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
